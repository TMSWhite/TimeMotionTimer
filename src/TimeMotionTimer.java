/*
A basic extension of the JApplet class
*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.awt.event.*;
import java.text.*;

public class TimeMotionTimer extends JApplet
    implements MouseListener, ActionListener, KeyListener, ComponentListener
{
    /* Local variables Needed for non gui part */

	long startTime=System.currentTimeMillis();
	String startTimeStr=new Date(startTime).toString();
	Vector dataSrc = new Vector();
	Vector keymapButtons = new Vector();
	Hashtable keymap = new Hashtable();
	JPopupMenu popup = new JPopupMenu();
//	Vector events = new Vector();   // stores Strings
	EventCode currentEvent = null;

	public void init()
	{
		// This line prevents the "Swing: checked access to system event queue" message seen in some browsers.
		getRootPane().putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(new BorderLayout(0,0));
		getContentPane().setBackground(java.awt.Color.lightGray);
		getContentPane().setForeground(java.awt.Color.black);
		getContentPane().setFont(new Font("SansSerif", Font.PLAIN, 12));
		setSize(630,470);
		instructionsPanel.setRequestFocusEnabled(false);
		instructionsPanel.setDoubleBuffered(false);
		instructionsPanel.setLayout(new BorderLayout(0,0));
		getContentPane().add(BorderLayout.NORTH, instructionsPanel);
		instructionsPanel.setBounds(0,0,630,30);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel1.setText("Time-Motion Timer");
		JLabel1.setOpaque(true);
		instructionsPanel.add(BorderLayout.NORTH, JLabel1);
		JLabel1.setBounds(0,0,630,15);
		JLabel2.setRequestFocusEnabled(false);
		JLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel2.setText("Instructions:  Setup data to collect; Run timers to collect data; Cut&Paste data to save");
		JLabel2.setOpaque(true);
		instructionsPanel.add(BorderLayout.CENTER, JLabel2);
		JLabel2.setBounds(0,15,630,15);
		tabbedPanel.setRequestFocusEnabled(false);
		tabbedPanel.setOpaque(true);
		getContentPane().add(BorderLayout.CENTER, tabbedPanel);
		tabbedPanel.setBounds(0,30,630,440);
		dataModelPanel.setRequestFocusEnabled(false);
		dataModelPanel.setDoubleBuffered(false);
		dataModelPanel.setLayout(new BorderLayout(0,0));
		tabbedPanel.add(dataModelPanel);
		dataModelPanel.setBounds(2,27,625,410);
		dataModelPanel.setVisible(false);
		JPanel8.setRequestFocusEnabled(false);
		JPanel8.setDoubleBuffered(false);
		JPanel8.setLayout(new BorderLayout(0,2));
		dataModelPanel.add(BorderLayout.NORTH, JPanel8);
		JPanel8.setBounds(0,0,625,125);
		JLabel3.setRequestFocusEnabled(false);
		JLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel3.setText("Specify Identifying Data - on each line use the syntax:   Name,Field_Width");
		JLabel3.setLabelFor(modelText);
		JLabel3.setAlignmentY(0.0F);
		JLabel3.setOpaque(true);
		JPanel8.add(BorderLayout.NORTH, JLabel3);
		JLabel3.setBounds(0,0,625,15);
		JScrollPane2.setRequestFocusEnabled(false);
		JScrollPane2.setOpaque(true);
		JPanel8.add(BorderLayout.CENTER, JScrollPane2);
		JScrollPane2.setBounds(0,17,625,108);
		modelText.setRows(7);
		modelText.setTabSize(4);
		JScrollPane2.getViewport().add(modelText);
		modelText.setBounds(0,0,622,105);
		JPanel3.setRequestFocusEnabled(false);
		JPanel3.setDoubleBuffered(false);
		JPanel3.setLayout(new BorderLayout(0,2));
		dataModelPanel.add(BorderLayout.CENTER, JPanel3);
		JPanel3.setBounds(0,125,625,204);
		JLabel6.setRequestFocusEnabled(false);
		JLabel6.setText("Specify Timed Event Codes:  on each line use the syntax:  Key,Meaning,auto_stop_at_next_event(y/n)");
		JLabel6.setLabelFor(keymapText);
		JLabel6.setOpaque(true);
		JPanel3.add(BorderLayout.NORTH, JLabel6);
		JLabel6.setBounds(0,0,625,15);
		JScrollPane4.setRequestFocusEnabled(false);
		JScrollPane4.setOpaque(true);
		JPanel3.add(BorderLayout.CENTER, JScrollPane4);
		JScrollPane4.setBounds(0,17,625,187);
		keymapText.setRows(7);
		keymapText.setTabSize(4);
		JScrollPane4.getViewport().add(keymapText);
		keymapText.setBounds(0,0,622,184);
		JPanel7.setRequestFocusEnabled(false);
		JPanel7.setDoubleBuffered(false);
		JPanel7.setLayout(new BorderLayout(0,2));
		dataModelPanel.add(BorderLayout.SOUTH, JPanel7);
		JPanel7.setBounds(0,329,625,81);
		JPanel1.setRequestFocusEnabled(false);
		JPanel1.setDoubleBuffered(false);
		JPanel1.setLayout(new FlowLayout(FlowLayout.CENTER,5,2));
		JPanel7.add(BorderLayout.NORTH, JPanel1);
		JPanel1.setBounds(0,0,625,29);
		submitAll.setText("Submit & Start");
		submitAll.setActionCommand("Submit");
		JPanel1.add(submitAll);
		submitAll.setBounds(219,2,117,25);
		clearButton.setText("Clear");
		clearButton.setActionCommand("Clear");
		JPanel1.add(clearButton);
		clearButton.setBounds(341,2,65,25);
		JLabel7.setRequestFocusEnabled(false);
		JLabel7.setText("Setup Errors:");
		JLabel7.setOpaque(true);
		JPanel7.add(BorderLayout.CENTER, JLabel7);
		JLabel7.setBounds(0,31,625,15);
		JScrollPane3.setRequestFocusEnabled(false);
		JScrollPane3.setOpaque(true);
		JPanel7.add(BorderLayout.SOUTH, JScrollPane3);
		JScrollPane3.setBounds(0,48,625,33);
		errorText.setRows(2);
		errorText.setRequestFocusEnabled(false);
		errorText.setTabSize(4);
		errorText.setEditable(false);
		JScrollPane3.getViewport().add(errorText);
		errorText.setBounds(0,0,622,30);
		dataEntryPanel.setRequestFocusEnabled(false);
		dataEntryPanel.setDoubleBuffered(false);
		dataEntryPanel.setLayout(new BorderLayout(0,0));
		tabbedPanel.add(dataEntryPanel);
		dataEntryPanel.setBounds(2,27,625,410);
		dataEntryPanel.setVisible(false);
		dataOptionsPanel.setRequestFocusEnabled(false);
		dataOptionsPanel.setAlignmentX(0.0F);
		dataOptionsPanel.setDoubleBuffered(false);
		dataOptionsPanel.setLayout(new BoxLayout(dataOptionsPanel,BoxLayout.Y_AXIS));
		dataEntryPanel.add(BorderLayout.NORTH, dataOptionsPanel);
		dataOptionsPanel.setBounds(0,0,625,0);
		JPanel2.setLayout(new BorderLayout(0,0));
		dataEntryPanel.add(BorderLayout.CENTER, JPanel2);
		JPanel2.setBounds(0,0,625,410);
		JPanel6.setRequestFocusEnabled(false);
		JPanel6.setDoubleBuffered(false);
		JPanel6.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel2.add(BorderLayout.NORTH, JPanel6);
		JPanel6.setBounds(0,0,625,35);
		startButton.setText("StartTimer");
		startButton.setActionCommand("StartTimer");
		JPanel6.add(startButton);
		startButton.setBounds(101,5,95,25);
		JLabel4.setRequestFocusEnabled(false);
		JLabel4.setText("Enter Single Character Events:");
		JLabel4.setOpaque(true);
		JPanel6.add(JLabel4);
		JLabel4.setBounds(201,10,172,15);
		eventEnterBox.setColumns(4);
		JPanel6.add(eventEnterBox);
		eventEnterBox.setBounds(378,8,44,19);
		stopButton.setText("Stop Timer");
		stopButton.setActionCommand("Stop Timer");
		JPanel6.add(stopButton);
		stopButton.setBounds(427,5,97,25);
		JScrollPane1.setRequestFocusEnabled(false);
		JScrollPane1.setOpaque(true);
		JPanel2.add(BorderLayout.CENTER, JScrollPane1);
		JScrollPane1.setBounds(0,35,625,375);
		dataText.setRows(18);
		dataText.setTabSize(4);
		dataText.setEditable(false);
		JScrollPane1.getViewport().add(dataText);
		dataText.setBounds(0,0,622,372);
		keymapPanel.setAlignmentX(0.0F);
		keymapPanel.setLayout(new BoxLayout(keymapPanel,BoxLayout.Y_AXIS));
		dataEntryPanel.add(BorderLayout.SOUTH, keymapPanel);
		keymapPanel.setBounds(0,410,625,0);
		tabbedPanel.setSelectedIndex(0);
		tabbedPanel.setSelectedComponent(dataModelPanel);
		tabbedPanel.setTitleAt(0,"Setup");
		tabbedPanel.setTitleAt(1,"Run");
		//}}

		//{{REGISTER_LISTENERS
		//}}

		/* Add custon controls, avoiding re-writes by Symantec */
		startButton.addActionListener(this);
		clearButton.addActionListener(this);
		stopButton.addActionListener(this);
		submitAll.addActionListener(this);
//		resetKeymap.addActionListener(this);
        eventEnterBox.addMouseListener(this);
        eventEnterBox.addKeyListener(this);
        dataOptionsPanel.addMouseListener(this);
        dataText.addMouseListener(this);
        this.addComponentListener(this);

        /*
        for (int i = 0;i<this.getComponentCount();++i) {
            Component c = this.getComponent(i);
            c.setForeground(Color.black);
            c.setBackground(Color.lightGray);
        }
        */

        this.validate();
        modelText.requestFocus();
    }

	//{{DECLARE_CONTROLS
	javax.swing.JPanel instructionsPanel = new javax.swing.JPanel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JTabbedPane tabbedPanel = new javax.swing.JTabbedPane();
	javax.swing.JPanel dataModelPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel8 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JScrollPane JScrollPane2 = new javax.swing.JScrollPane();
	javax.swing.JTextArea modelText = new javax.swing.JTextArea();
	javax.swing.JPanel JPanel3 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JScrollPane JScrollPane4 = new javax.swing.JScrollPane();
	javax.swing.JTextArea keymapText = new javax.swing.JTextArea();
	javax.swing.JPanel JPanel7 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JButton submitAll = new javax.swing.JButton();
	javax.swing.JButton clearButton = new javax.swing.JButton();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JScrollPane JScrollPane3 = new javax.swing.JScrollPane();
	javax.swing.JTextArea errorText = new javax.swing.JTextArea();
	javax.swing.JPanel dataEntryPanel = new javax.swing.JPanel();
	javax.swing.JPanel dataOptionsPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel6 = new javax.swing.JPanel();
	javax.swing.JButton startButton = new javax.swing.JButton();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField eventEnterBox = new javax.swing.JTextField();
	javax.swing.JButton stopButton = new javax.swing.JButton();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JTextArea dataText = new javax.swing.JTextArea();
	javax.swing.JPanel keymapPanel = new javax.swing.JPanel();
	//}}

	void startButton_actionPerformed(ActionEvent event)
	{
	    stopAndPrint();

    	startTime = System.currentTimeMillis();
    	Date date = new Date(startTime);

		startTimeStr = DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(date);
		eventEnterBox.requestFocus();
	}

	void eventEnterBox_keyTyped(KeyEvent e)
	{
	    /* If key has not been defined, create new mapping */
	    long    time = System.currentTimeMillis();
	    String key = new Character(e.getKeyChar()).toString();
	    Object obj = keymap.get(key);
	    if (obj == null) {
	        keymapText.append(key + ",?,n\n");
            EventCode event = new EventCode(key,"?",false);
		    keymap.put(key,event);
		    keymapButtons.addElement(event);
		    event.start(time);
	        layoutFlowIntoBox(this, keymapPanel, keymapButtons);
	    } else {
	        ((EventCode) obj).start(time);
	    }
	}

	void clearButton_actionPerformed(ActionEvent event)
	{
		modelText.setText("");
		keymapText.setText("");
		modelText.requestFocus();

	}

	void stopButton_actionPerformed(ActionEvent event)
	{
        stopAndPrint();
	}

	private void stopAndPrint() {
	    long time = System.currentTimeMillis();
        Enumeration enum;

        enum = keymapButtons.elements();
        while(enum.hasMoreElements()) {
            EventCode event = (EventCode) enum.nextElement();
            event.stop(time);   // ensure that strings completed
        }

        /*
        enum = events.elements();
        while(enum.hasMoreElements()) {
            dataText.append((String) enum.nextElement());
        }
        events = new Vector();
        */

        currentEvent = null;
	}

	void submitAll_actionPerformed(ActionEvent event)
	{
		String label, line;
		StringTokenizer lines, st;
		int errorCount=0;
		DataField defaultdf = null;

		errorText.setText("");

		lines = new StringTokenizer(modelText.getText(),"\n");

		dataSrc = new Vector();

		dataText.append("\"StartTime\"");	// so can list column titles
		for(int count=1;lines.hasMoreTokens();++count) {
		    line = lines.nextToken();
		    st = new StringTokenizer(line,",");
		    DataField df;

		    if (st.countTokens() != 2) {
		        errorText.append("[DataModel] Wrong format on line " + count + " '" + line + "'\n");
		        errorCount++;
		        continue;
		    }
		    label = st.nextToken();
		    df = new DataField(label, st.nextToken());
		    if (df == null) {
		        errorText.append("[DataModel] Unable to add '" + line + "'");
		        ++errorCount;
		        continue;
		    }

		    dataSrc.addElement(df);

            dataText.append(",\"" + label + "\"");
            if (count == 1) {
                defaultdf = df;
            }
		}
		dataText.append(",\"EventKey\",\"KeyMapping\",\"TimeSinceStart\",\"EventDuration\"\n");

	    layoutFlowIntoBox(this, dataOptionsPanel, dataSrc);

        resetKeymap_doit(errorCount);

        if (defaultdf != null) {
            defaultdf.requestFocus();
        }
	}

//	public void resetKeymap_actionPerformed(ActionEvent event) {
//	    /* Won't this stop all on-going events? */
//	    stopAndPrint();
//	    resetKeymap_doit(0);
//	    eventEnterBox.requestFocus();
//	}

	private void resetKeymap_doit(int errorCount) {
		String label, line;
		StringTokenizer lines, st;

		keymapButtons = new Vector();

        lines = new StringTokenizer(keymapText.getText(),"\n");

        keymap.clear();
        popup.removeAll();

        for(int count=1;lines.hasMoreTokens();++count) {
            line = lines.nextToken();
            st = new StringTokenizer(line,",");
		    if (st.countTokens() != 3) {
		        errorText.append("[EventCode] Expect 3 args on line " + count + " '" + line + "'\n");
		        errorCount++;
		        continue;
		    }
		    String src, dst, autoStopStr;
		    boolean autoStop;

		    src = st.nextToken().trim();
		    if (src.length() != 1) {
		        errorText.append("[EventCode] Keys should be one character:  line " + count + " '" + line + "'\n");
		        errorCount++;
		        continue;
		    }
		    dst = st.nextToken().trim();
		    autoStopStr = st.nextToken().trim().toLowerCase();
		    if (autoStopStr.equals("y")) {
		        autoStop = true;
		    }
		    else if (autoStopStr.equals("n")) {
		        autoStop = false;
		    }
		    else {
                errorText.append("[EventCode] auto_stop must be 'y' or 'n' on line " + count + " '" + line + "'\n");
                errorCount++;
                continue;
            }

            EventCode event = new EventCode(src,dst,autoStop);
		    keymap.put(src,event);
		    keymapButtons.addElement(event);
        }

	    layoutFlowIntoBox(this, keymapPanel, keymapButtons);

        if (errorCount == 0) {
            tabbedPanel.setSelectedIndex(1);
        }
	}

	private void layoutFlowIntoBox(Container bounds, JComponent box, Vector components) {
	    /* Assumes that width of dst is same as master */
	    int count,x,maxWidth;
        Enumeration enum = components.elements();
        FlowLayout flow = new FlowLayout(FlowLayout.CENTER,2,2);
        JPanel jp = coloredJPanel(flow);
        Insets insets = jp.getInsets(); // will always be the same:  same FlowLayout

        maxWidth = bounds.getSize().width - (bounds.getInsets().left + bounds.getInsets().right);

        /* Clear previous sub-elements of box */
        box.removeAll();

        for (x=0,count=0;enum.hasMoreElements();++count) {
            JComponent jc = (JComponent) enum.nextElement();
            Dimension d = jc.getPreferredSize();

            if (d.width + x > maxWidth) {
                if (d.width > maxWidth) {
                    /* avoid infinite loop in trying to add:  Won't fit in
                    current or new panel, so add new one. */
                    if (count > 0) {
                        box.add(jp);
                        jp = coloredJPanel(new FlowLayout(FlowLayout.LEFT,2,2));
                    }
                    jp.add(jc); // make new panel for it, and fill it even though won't fit
                    box.add(jp);
                    jp = coloredJPanel(flow);
                    x = 0;
                }
                else {
                    if (count > 0)
                        box.add(jp);
                    jp = coloredJPanel(flow);
                    jp.add(jc);
                    x = d.width + insets.right;
                }
            }
            else {
                jp.add(jc);
                x += d.width + insets.right;
            }
        }
        if (count > 0) {
            if (x > 0) {
                box.add(jp);
            }
            box.validate();
        }
    }

    private JPanel coloredJPanel(FlowLayout flow) {
        JPanel jp = new JPanel(flow);
        jp.setForeground(Color.black);
        jp.setBackground(Color.lightGray);
        return jp;
    }

    class EventCode extends JButton implements ActionListener {
        /* Implements popup menu and buttons - triggers event */
        long    eventStart;
        String  eventKey;
        String  trans;
        boolean autoStop;
        JMenuItem jmi;
        boolean running=false;  // don't allow nested events
        StringBuffer str;

        public EventCode(String eventKey, String trans, boolean autoStop) {
            super();

            String msg;
            this.eventKey = eventKey.trim();
            this.trans = trans.trim();
            this.autoStop = autoStop;

            msg = new String(this.eventKey + "->" + this.trans);
            this.setText(msg);
            jmi = new JMenuItem(msg);
		    try {
    		    jmi.setAccelerator(KeyStroke.getKeyStroke(eventKey));
		    } catch (NullPointerException e) { }
		    jmi.addActionListener(this);
		    popup.add(jmi);
		    this.addActionListener(this);

		    this.setBackground(Color.lightGray);
		    this.setForeground(Color.black);
		}

	    public void actionPerformed(ActionEvent event)
	    {
            start(System.currentTimeMillis());
	    }

	    public void start(long time) {
	        eventEnterBox.setText(eventKey);
	        eventEnterBox.selectAll();

	        if (currentEvent != null && currentEvent != this) {
	            currentEvent.tryAutoStop(time);
	        }
	        if (running) {
	            if (autoStop) {
	                stop(time); // and start again
	            } else {
	                stop(time);
	                return; // and don't start again
	            }
	        }

	        str = new StringBuffer();

            eventStart = time;

            str.append("\"" + startTimeStr + "\"");

            Enumeration enum = dataSrc.elements();
            while(enum.hasMoreElements()) {
                str.append(",\"" + ((DataField) enum.nextElement()).getText() + "\"");
            }

		    str.append(",\"" + eventKey + "\",\"" + trans + "\"," + (eventStart - startTime));

            running = true;

            currentEvent = this;

	        this.setBackground(Color.green);
	        this.repaint();
	    }

	    public void stop(long time) {
	        /* Should autoStops be stopped by someone else's stop, or just starts? */
	        if (!running)
    	        return;

    	    str.append("," + (time - eventStart) + "\n");
//    	    events.addElement(new String(str));
            dataText.append(str.toString());

	        running = false;
	        this.setBackground(Color.lightGray);
	        this.repaint();
	    }

	    public void tryAutoStop(long time) {
	        if (autoStop)
	            stop(time);
	    }
   }


	class DataField extends JPanel implements FocusListener {
		JLabel myLabel = new JLabel();
		JTextField myText = new JTextField();

		public DataField(String label, String width) {
			super(new FlowLayout(FlowLayout.CENTER,2,2));

			int	columns = new Integer(width.trim()).intValue();
			this.setRequestFocusEnabled(false);
			myLabel.setRequestFocusEnabled(false);
			myLabel.setText(label.trim());
			myLabel.setLabelFor(myText);
			myLabel.setOpaque(true);
			this.add(myLabel);
			myText.setColumns(columns);
			this.add(myText);
			myText.addFocusListener(this);
            myText.setBackground(Color.lightGray);
            myText.setForeground(Color.black);
            myLabel.setBackground(Color.lightGray);
            myLabel.setForeground(Color.black);
            this.setBackground(Color.lightGray);
            this.setForeground(Color.black);
		}

		public void focusGained(FocusEvent event)
		{
			myText.selectAll();	// so easily remove unwanted
		}

		public void focusLost(FocusEvent event) { }

		public String getText() {
			return myText.getText();
		}

		public void requestFocus() {
		    myText.requestFocus();
		    stopButton.setNextFocusableComponent(myText);
		}
	}

	private void maybeShowPopup(MouseEvent e) {
	    if (e.isPopupTrigger()) {
	        popup.show(e.getComponent(),e.getX(), e.getY());
        }
	}

	/* Code for MenuListener */

	public void mouseReleased(MouseEvent event)
	{
        maybeShowPopup(event);
    }

	public void mousePressed(MouseEvent event)
	{
        maybeShowPopup(event);
	}

	public void mouseClicked(MouseEvent event)
	{
        maybeShowPopup(event);
	}

	public void mouseEntered(MouseEvent event) { }
	public void mouseExited(MouseEvent event) { }

	/* Code for ActionListener */

	public void actionPerformed(ActionEvent event)
	{
		Object obj = event.getSource();
    	if (obj instanceof JButton) {
		    if (obj == startButton) {
			    startButton_actionPerformed(event);
		    } else if (obj == clearButton) {
			    clearButton_actionPerformed(event);
		    } else if (obj == stopButton) {
			    stopButton_actionPerformed(event);
		    } else if (obj == submitAll) {
			    submitAll_actionPerformed(event);
//		    } else if (obj == resetKeymap) {
//			    resetKeymap_actionPerformed(event);
    	    }
    	}
	}


	/* Code for EventListener */
	public void keyTyped(KeyEvent event)
	{
	    Object obj = event.getSource();
	    if (obj == eventEnterBox) {
			eventEnterBox_keyTyped(event);
	    }
	}

	public void keyPressed(KeyEvent event) { }
	public void keyReleased(KeyEvent event) { }

	/* Code for ComponentListener */
	public void componentHidden(ComponentEvent e) { }
	public void componentMoved(ComponentEvent e) { }
	public void componentShown(ComponentEvent e) { }

	public void componentResized(ComponentEvent e) {
	    layoutFlowIntoBox(this, dataOptionsPanel, dataSrc);
	    layoutFlowIntoBox(this, keymapPanel, keymapButtons);
	    this.validate();    // else doesn't fully resize everything
	}
}
